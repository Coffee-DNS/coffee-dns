// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NameserverClient is the client API for Nameserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameserverClient interface {
	Status(ctx context.Context, in *NameserverHealthReq, opts ...grpc.CallOption) (*NameserverHealthResp, error)
	GetRecord(ctx context.Context, in *NameserverGetRecordReq, opts ...grpc.CallOption) (*NameserverGetRecordResp, error)
	CreateRecord(ctx context.Context, in *NameserverCreateRecordReq, opts ...grpc.CallOption) (*NameserverCreateRecordResp, error)
	DeleteRecord(ctx context.Context, in *NameserverDeleteRecordReq, opts ...grpc.CallOption) (*NameserverDeleteRecordResp, error)
}

type nameserverClient struct {
	cc grpc.ClientConnInterface
}

func NewNameserverClient(cc grpc.ClientConnInterface) NameserverClient {
	return &nameserverClient{cc}
}

func (c *nameserverClient) Status(ctx context.Context, in *NameserverHealthReq, opts ...grpc.CallOption) (*NameserverHealthResp, error) {
	out := new(NameserverHealthResp)
	err := c.cc.Invoke(ctx, "/api.Nameserver/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameserverClient) GetRecord(ctx context.Context, in *NameserverGetRecordReq, opts ...grpc.CallOption) (*NameserverGetRecordResp, error) {
	out := new(NameserverGetRecordResp)
	err := c.cc.Invoke(ctx, "/api.Nameserver/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameserverClient) CreateRecord(ctx context.Context, in *NameserverCreateRecordReq, opts ...grpc.CallOption) (*NameserverCreateRecordResp, error) {
	out := new(NameserverCreateRecordResp)
	err := c.cc.Invoke(ctx, "/api.Nameserver/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameserverClient) DeleteRecord(ctx context.Context, in *NameserverDeleteRecordReq, opts ...grpc.CallOption) (*NameserverDeleteRecordResp, error) {
	out := new(NameserverDeleteRecordResp)
	err := c.cc.Invoke(ctx, "/api.Nameserver/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameserverServer is the server API for Nameserver service.
// All implementations must embed UnimplementedNameserverServer
// for forward compatibility
type NameserverServer interface {
	Status(context.Context, *NameserverHealthReq) (*NameserverHealthResp, error)
	GetRecord(context.Context, *NameserverGetRecordReq) (*NameserverGetRecordResp, error)
	CreateRecord(context.Context, *NameserverCreateRecordReq) (*NameserverCreateRecordResp, error)
	DeleteRecord(context.Context, *NameserverDeleteRecordReq) (*NameserverDeleteRecordResp, error)
	mustEmbedUnimplementedNameserverServer()
}

// UnimplementedNameserverServer must be embedded to have forward compatible implementations.
type UnimplementedNameserverServer struct {
}

func (UnimplementedNameserverServer) Status(context.Context, *NameserverHealthReq) (*NameserverHealthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedNameserverServer) GetRecord(context.Context, *NameserverGetRecordReq) (*NameserverGetRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedNameserverServer) CreateRecord(context.Context, *NameserverCreateRecordReq) (*NameserverCreateRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedNameserverServer) DeleteRecord(context.Context, *NameserverDeleteRecordReq) (*NameserverDeleteRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedNameserverServer) mustEmbedUnimplementedNameserverServer() {}

// UnsafeNameserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameserverServer will
// result in compilation errors.
type UnsafeNameserverServer interface {
	mustEmbedUnimplementedNameserverServer()
}

func RegisterNameserverServer(s grpc.ServiceRegistrar, srv NameserverServer) {
	s.RegisterService(&Nameserver_ServiceDesc, srv)
}

func _Nameserver_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameserverHealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameserverServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nameserver/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameserverServer).Status(ctx, req.(*NameserverHealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nameserver_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameserverGetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameserverServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nameserver/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameserverServer).GetRecord(ctx, req.(*NameserverGetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nameserver_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameserverCreateRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameserverServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nameserver/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameserverServer).CreateRecord(ctx, req.(*NameserverCreateRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nameserver_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameserverDeleteRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameserverServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nameserver/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameserverServer).DeleteRecord(ctx, req.(*NameserverDeleteRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Nameserver_ServiceDesc is the grpc.ServiceDesc for Nameserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nameserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Nameserver",
	HandlerType: (*NameserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Nameserver_Status_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _Nameserver_GetRecord_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _Nameserver_CreateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _Nameserver_DeleteRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nameserver.proto",
}
